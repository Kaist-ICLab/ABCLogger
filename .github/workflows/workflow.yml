name: APK Build

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Android CD
    runs-on: ubuntu-latest

    steps:
      - name: Clone the Repo to CI/CD Workspace
        uses: actions/checkout@v2
      
      # - name: Set up JDK
      #   uses: actions/setup-java@v1.4.3
      #   with:
      #     java-version: 17

      # - name : Setup Configurations
      #   run: npm install && cd android && chmod +x ./gradlew

      # - name: Create Google-services.json
      #   env:
      #     DATA: ${{ secrets.GOOGLE_SERVICE_JSON }}
      #   run: echo $DATA > android/app/google-services.json

      # - name: Create secrets.json
      #   env:
      #     DATA: ${{ secrets.SECRETS }}
      #   run: echo $DATA > secrets.json

      # - name: Create upload.keystore
      #   env:
      #     DATA: ${{ secrets.ANDROID_KEY_STORE_BASE64 }}
      #   run: echo $DATA > tmp.txt && base64 -d -i tmp.txt > android/app/upload.keystore

      # - name: Build Application
      #   run: cd android && ./gradlew assembleRelease --no-daemon

      # - name: Deploy using Firebase App Distribution
      #   uses: wzieba/Firebase-Distribution-Github-Action@v1
      #   with:
      #     appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
      #     serviceCredentialsFileContent: ${{secrets.FIREBASE_DISTRIBUTION_SERVICE_ACCOUNT}}
      #     file: android/app/build/outputs/apk/release/app-release.apk
      
      - name: Get app version
        id: get_version
        run: node setup.js

      - name: Release to Github Repo
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          title: 'Release ${{ steps.get_version.outputs.versionName }}(VersionCode: ${{ steps.get_version.outputs.versionCode }})'
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "v${{ steps.get_version.outputs.versionName}}"
          files: android/app/build/outputs/apk/release/app-release.apk

      # - name: Notify Slack on Success
      #   if: success()
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' \
      #     --data '{"text":"Build successful! :tada:"}' \
      #     ${{ secrets.SLACK_WEBHOOK_URL }}
        
      # - name: Notify Slack on Failure
      #   if: failure()
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' \
      #     --data '{"text":"Build failed! :x:"}' \
      #     ${{ secrets.SLACK_WEBHOOK_URL }}
